#!/usr/bin/perl
use strict;
use Getopt::Std;

# Find and solve all pentomino tilings where the board 
# is a rectangle with one rectangular hole.
# Leaves boards in $board_dir and complete solutions in $sol_dir.

my $usage = "usage: $0 [-q] [-b board-dir] [-s sol-dir]";

my $min_size   = 4;
my $max_size   = 30;
my $pent_area  = 60;
my $board_dir  = 'ring-boards';
my $sol_dir    = 'ring-sols';
my $tiles      = '../tiles';

my %opt;
my @boards;

main();
sub main {
    die "$usage\n" if not getopts('b:s:q', \%opt);
    $board_dir = $opt{b} if $opt{b};
    $sol_dir = $opt{s} if $opt{s};
    if (-e $board_dir or -e $sol_dir) {
        print "$board_dir and/or $sol_dir already exist\n";
        return;
    }
    mkdir $board_dir;
    mkdir $sol_dir;
    my $item = 1;
    for (my $ox = $min_size; $ox <= $max_size; ++$ox) {
    for (my $oy = $min_size; $oy <= $max_size; ++$oy) {
        for (my $ix = 1; $ix <= $ox-2; ++$ix) {
        for (my $iy = 1; $iy <= $oy-2; ++$iy) {
            if ($ox*$oy - $ix*$iy == $pent_area) {
                for (my $hx = 1; $hx+$ix+1 < $ox; ++$hx) {
                for (my $hy = 1; $hy+$iy+1 < $oy; ++$hy) {
                    $item = solve_ring($item, $ox, $oy, $ix, $iy, $hx, $hy);
                }
                }
            }
        }
        }
    }
    }
}

# ox,oy = outer dimensions
# ix,iy = dimensions of inner hole
# hx,hy = position of upper left cell of hole
sub solve_ring {
    my ($item, $ox, $oy, $ix, $iy, $hx, $hy) = @_;
    my $board_file = "$board_dir/$item";
    my $sol_file = "$sol_dir/$item";
    my $board = mkboard($board_file, $ox, $oy, $ix, $iy, $hx, $hy);
    my $solutions = is_dup_board($board, $ox, $oy) ?
        0 : mksol($board_file, $sol_file);
    if ($solutions == 0) {
        unlink $board_file, $sol_file;
    } else {
        printf "%5d. %-5s - %-12s : %5d solutions\n", $item,
                $ox.'x'.$oy, 
                $ix.'x'.$iy.' @'.$hx.','.$hy,
                $solutions
            unless $opt{q};
        push @boards, $board;
        ++$item;
    }
    return $item;
}

# Create board file and return string representing the board.
sub mkboard {
    my ($board_file, $ox, $oy, $ix, $iy, $hx, $hy) = @_;
    my $f;
    die "cannot create $board_file" if not open $f, '>', $board_file;
    my $board = '';
    for (my $y = 0; $y < $oy; ++$y) {
        my $row = ($y < $hy or $y >= $hy+$iy) ? ('*' x $ox) :
            (('*' x $hx) . ('.' x $ix) . ('*' x ($ox-$hx-$ix)));
        print $f "$row\n";
        $board .= $row;
    }
    close $f;
    return $board;
}

# Find all solutions for a board.
sub mksol {
    my ($board_file, $sol_file) = @_;
    system("$tiles -p '$board_file' > '$sol_file'");
    my ($solutions) = `tail -1 '$sol_file'` =~ /^\s*(\d+) solutions/;
    $solutions = 0 if not $solutions;
    return $solutions;
}

# Is a board a rotation and/or reflection of an existing solution?
sub is_dup_board {
    my ($new_board, $ox, $oy) = @_;
    foreach my $board (@boards) {
        return 1 if is_equiv_board($board, $new_board, $ox, $oy);
    }
    return 0;
}

# Are two boards equivalent (rotation/reflection of each other)?
sub is_equiv_board {
    my ($board1, $board2, $ox, $oy) = @_;
    for (my $i = 0; $i < 8; ++$i) {
        return 1 if $board1 eq $board2;
        $board2 = reverse_board($board2, $ox, $oy, ($i != 3));
        ($ox,$oy) = ($oy,$ox);
    }
    return 0;
}

# Rotate 90 degrees (if r90==1) or reverse a board.
# Resulting board is always dimensions (oy,ox).
sub reverse_board {
    my ($board, $ox, $oy, $r90) = @_;
    my $b = '';
    for (my $i = 0; $i < length $board; ++$i) {
        my $x = int($i / $oy);
        my $y = $i % $oy;
        $y = $oy-1 - $y if $r90;
        $b .= substr($board, $y*$ox + $x, 1);
    }
    return $b;
}
